{
    "docs": [
        {
            "location": "/", 
            "text": "Siddhi-io-cdc\n\n\nThe \nsiddhi-io-cdc extension\n is an extension to \nSiddhi\n. It receives change data from MySQL, MS SQL Server, Postgresql, H2 and Oracle in the key-value format.\n\n\nPrerequisites\n\n\nDefault mode (listening):\n\n\n\n\nThe MySQL server should be configured to use a row-level binary log.\n\n\nWSO2 SP State persistence should be enabled.\n\n\nA MySQL user should be created with SELECT, RELOAD, SHOW DATABASES, REPLICATION SLAVE, REPLICATION CLIENT privileges on the tables he wants to capture changes.\n\n\n\n\nPolling mode:\n\n\n\n\nChange data capturing table should be have a polling column. Auto Incremental column or Timestamp can be used.\n\n\n\n\nPlease see API docs for more details about change data capturing modes.\n\n\nFind some useful links below:\n\n\n\n\nSource code\n\n\nReleases\n\n\nIssue tracker\n\n\n\n\nLatest API Docs\n\n\nLatest API Docs is \n1.0.6\n.\n\n\nHow to use\n\n\nUsing the extension in \nWSO2 Stream Processor\n\n\n\n\n\n\nYou can use this extension with the latest \nWSO2 Stream Processor\n that is a part of the \nWSO2 Analytics\n offering, with editor, debugger and simulation support.\n\n\n\n\n\n\nThis extension is shipped by default with WSO2 Stream Processor. If you need to use an alternative version of this extension, you can replace the component \njar\n that can be found in the \nSTREAM_PROCESSOR_HOME\n/lib\n directory.\n\n\n\n\n\n\nUsing the extension as a \njava library\n\n\n\n\nThis extension can be added as a maven dependency along with other Siddhi dependencies to your project.\n\n\n\n\ndependency\n\n  \ngroupId\norg.wso2.extension.siddhi.io.cdc\n/groupId\n\n  \nartifactId\nsiddhi-io-cdc\n/artifactId\n\n  \nversion\nx.x.x\n/version\n\n \n/dependency\n\n\n\n\n\n\nRunning Integration tests in docker containers(Optional)\n\n\nThe CDC functionality are tested with the docker base integration test framework.\nThe test framework initialize a docker container with required configuration before execute the test suit.\n\n\nStart integration tests\n\n\n\n\n\n\nInstall and run docker\n\n\n\n\n\n\nTo run the integration tests, navigate to the siddhi-io-cdc/ directory and issue the following commands.\n\n\n\n\n\n\nH2 default:\n\n\nmvn clean install\n\n\n\n\n\n\n\n\n\nMySQL 5.7:\n\n\n mvn verify -P local-mysql -Dskip.surefire.test=true\n\n\n\n\n\n\n\n\n\nPostgres 9.6:\n\n\n mvn verify -P local-postgres -Dskip.surefire.test=true\n\n\n\n\n\n\n\n\n\nMSSQL:\n\n\n mvn verify -P local-mssql -Dskip.surefire.test=true\n\n\n\n\n\n\n\n\n\nOracle 11.2.0.2-xe:\n\n\n mvn verify -P local-oracle -Dskip.surefire.test=true\n\n\n\n\n\n\n\n\n\n\n\n\n\nJenkins Build Status\n\n\n\n\n\n\n\n\n\n\nBranch\n\n\nBuild Status\n\n\n\n\n\n\n\n\n\n\nmaster\n\n\n\n\n\n\n\n\n\n\nFeatures\n\n\n\n\ncdc\n \n(Source)\nThe CDC source receives events when a Database table's change event (INSERT, UPDATE, DELETE) is triggered. The events are received in key-value format.\nThe following are key values of the map of a CDC change event and their descriptions.\nFor insert: Keys will be specified table's columns.\nFor delete: Keys will be 'before_' followed by specified table's columns. Eg: before_X.\nFor update: Keys will be specified table's columns and 'before_' followed by specified table's columns.\nFor 'polling' mode: Keys will be specified table's columns.\nSee parameter: mode for supported databases and change events.\n\n\n\n\nHow to Contribute\n\n\n\n\n\n\nReport issues at \nGitHub Issue Tracker\n.\n\n\n\n\n\n\nSend your contributions as pull requests to the \nmaster branch\n.\n\n\n\n\n\n\nContact us\n\n\n\n\n\n\nPost your questions with the \n\"Siddhi\"\n tag in \nStackoverflow\n.\n\n\n\n\n\n\nSiddhi developers can be contacted via the following mailing lists:\n\n\nDevelopers List   : \ndev@wso2.org\n\n\nArchitecture List : \narchitecture@wso2.org\n\n\n\n\n\n\nSupport\n\n\n\n\n\n\nWe are committed to ensuring support for this extension in production. Our unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology.\n\n\n\n\n\n\nFor more details and to take advantage of this unique opportunity contact us via \nhttp://wso2.com/support/\n.", 
            "title": "Welcome"
        }, 
        {
            "location": "/#siddhi-io-cdc", 
            "text": "The  siddhi-io-cdc extension  is an extension to  Siddhi . It receives change data from MySQL, MS SQL Server, Postgresql, H2 and Oracle in the key-value format.", 
            "title": "Siddhi-io-cdc"
        }, 
        {
            "location": "/#prerequisites", 
            "text": "Default mode (listening):   The MySQL server should be configured to use a row-level binary log.  WSO2 SP State persistence should be enabled.  A MySQL user should be created with SELECT, RELOAD, SHOW DATABASES, REPLICATION SLAVE, REPLICATION CLIENT privileges on the tables he wants to capture changes.   Polling mode:   Change data capturing table should be have a polling column. Auto Incremental column or Timestamp can be used.   Please see API docs for more details about change data capturing modes.  Find some useful links below:   Source code  Releases  Issue tracker", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/#latest-api-docs", 
            "text": "Latest API Docs is  1.0.6 .", 
            "title": "Latest API Docs"
        }, 
        {
            "location": "/#how-to-use", 
            "text": "Using the extension in  WSO2 Stream Processor    You can use this extension with the latest  WSO2 Stream Processor  that is a part of the  WSO2 Analytics  offering, with editor, debugger and simulation support.    This extension is shipped by default with WSO2 Stream Processor. If you need to use an alternative version of this extension, you can replace the component  jar  that can be found in the  STREAM_PROCESSOR_HOME /lib  directory.    Using the extension as a  java library   This extension can be added as a maven dependency along with other Siddhi dependencies to your project.   dependency \n   groupId org.wso2.extension.siddhi.io.cdc /groupId \n   artifactId siddhi-io-cdc /artifactId \n   version x.x.x /version \n  /dependency", 
            "title": "How to use"
        }, 
        {
            "location": "/#running-integration-tests-in-docker-containersoptional", 
            "text": "The CDC functionality are tested with the docker base integration test framework.\nThe test framework initialize a docker container with required configuration before execute the test suit.  Start integration tests    Install and run docker    To run the integration tests, navigate to the siddhi-io-cdc/ directory and issue the following commands.    H2 default:  mvn clean install    MySQL 5.7:   mvn verify -P local-mysql -Dskip.surefire.test=true    Postgres 9.6:   mvn verify -P local-postgres -Dskip.surefire.test=true    MSSQL:   mvn verify -P local-mssql -Dskip.surefire.test=true    Oracle 11.2.0.2-xe:   mvn verify -P local-oracle -Dskip.surefire.test=true", 
            "title": "Running Integration tests in docker containers(Optional)"
        }, 
        {
            "location": "/#jenkins-build-status", 
            "text": "Branch  Build Status      master", 
            "title": "Jenkins Build Status"
        }, 
        {
            "location": "/#features", 
            "text": "cdc   (Source) The CDC source receives events when a Database table's change event (INSERT, UPDATE, DELETE) is triggered. The events are received in key-value format. The following are key values of the map of a CDC change event and their descriptions. For insert: Keys will be specified table's columns. For delete: Keys will be 'before_' followed by specified table's columns. Eg: before_X. For update: Keys will be specified table's columns and 'before_' followed by specified table's columns. For 'polling' mode: Keys will be specified table's columns. See parameter: mode for supported databases and change events.", 
            "title": "Features"
        }, 
        {
            "location": "/#how-to-contribute", 
            "text": "Report issues at  GitHub Issue Tracker .    Send your contributions as pull requests to the  master branch .", 
            "title": "How to Contribute"
        }, 
        {
            "location": "/#contact-us", 
            "text": "Post your questions with the  \"Siddhi\"  tag in  Stackoverflow .    Siddhi developers can be contacted via the following mailing lists:  Developers List   :  dev@wso2.org  Architecture List :  architecture@wso2.org", 
            "title": "Contact us"
        }, 
        {
            "location": "/#support", 
            "text": "We are committed to ensuring support for this extension in production. Our unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology.    For more details and to take advantage of this unique opportunity contact us via  http://wso2.com/support/ .", 
            "title": "Support"
        }, 
        {
            "location": "/api/1.0.6/", 
            "text": "API Docs - v1.0.6\n\n\nSource\n\n\ncdc \n(Source)\n\n\nThe CDC source receives events when a Database table's change event (INSERT, UPDATE, DELETE) is triggered. The events are received in key-value format.\nThe following are key values of the map of a CDC change event and their descriptions.\nFor insert: Keys will be specified table's columns.\nFor delete: Keys will be 'before_' followed by specified table's columns. Eg: before_X.\nFor update: Keys will be specified table's columns and 'before_' followed by specified table's columns.\nFor 'polling' mode: Keys will be specified table's columns.\nSee parameter: mode for supported databases and change events.\n\n\n\nSyntax\n\n\n@source(type=\ncdc\n, url=\nSTRING\n, mode=\nSTRING\n, jdbc.driver.name=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, pool.properties=\nSTRING\n, datasource.name=\nSTRING\n, table.name=\nSTRING\n, polling.column=\nSTRING\n, polling.interval=\nINT\n, operation=\nSTRING\n, connector.properties=\nSTRING\n, database.server.id=\nSTRING\n, database.server.name=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nurl\n\n        \nConnection url to the database.\nuse format: jdbc:mysql://\nhost\n:\nport\n/\ndatabase_name\n \n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmode\n\n        \nMode to capture the change data. Mode 'polling' uses a polling.column to monitor the given table. Mode 'listening' uses logs to monitor the given table.\nThe required parameters are different for each modes.\nmode 'listening' currently supports only MySQL. INSERT, UPDATE, DELETE events can be received.\nmode 'polling' supports RDBMS. INSERT, UPDATE events can be received.\n\n        \nlistening\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the database. \nRequired for 'polling' mode.\n\n        \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nUsername of a user with SELECT, RELOAD, SHOW DATABASES, REPLICATION SLAVE, REPLICATION CLIENT privileges on Change Data Capturing table.\nFor polling mode, a user with SELECT privileges.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nPassword for the above user.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key-value pairs.\n\n        \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nName of the wso2 datasource to connect to the database. When datasource.name is provided, the url, username and password are not needed. Has a more priority over url based connection.\nAccepted only when mode is set to 'polling'.\n\n        \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nName of the table which needs to be monitored for data changes.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npolling.column\n\n        \nColumn name on which the polling is done to capture the change data. It is recommend to have a TIMESTAMP field as the polling.column in order to capture inserts and updates.\nNumeric auto incremental fields and char fields can be also used as polling.column. Note that it will only support insert change capturing and depends on how the char field's data is input.\nMandatory when mode is 'polling'.\n\n        \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \npolling.interval\n\n        \nThe interval in seconds to poll the given table for changes.\nAccepted only when mode is set to 'polling'.\n\n        \n1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \noperation\n\n        \nInterested change event operation. 'insert', 'update' or 'delete'. Required for 'listening' mode.\nNot case sensitive.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconnector.properties\n\n        \nDebezium connector specified properties as a comma separated string. \nThis properties will have more priority over the parameters. Only for 'listening' mode\n\n        \nEmpty_String\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatabase.server.id\n\n        \nFor MySQL, a unique integer between 1 to 2^32 as the ID, This is used when joining MySQL database cluster to read binlog. Only for 'listening'mode.\n\n        \nRandom integer between 5400 and 6400\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatabase.server.name\n\n        \nLogical name that identifies and provides a namespace for the particular database server. Only for 'listening' mode.\n\n        \n{host}_{port}\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type = \ncdc\n , url = \njdbc:mysql://localhost:3306/SimpleDB\n, \nusername = \ncdcuser\n, password = \npswd4cdc\n, \ntable.name = \nstudents\n, operation = \ninsert\n, \n@map(type=\nkeyvalue\n, @attributes(id = \nid\n, name = \nname\n)))\ndefine stream inputStream (id string, name string);\n\n\n\n\n\nIn this example, the cdc source starts listening to the row insertions  on students table with columns name and id which is under MySQL SimpleDB database that can be accessed with the given url\n\n\n\nEXAMPLE 2\n\n\n@source(type = \ncdc\n , url = \njdbc:mysql://localhost:3306/SimpleDB\n, \nusername = \ncdcuser\n, password = \npswd4cdc\n, \ntable.name = \nstudents\n, operation = \nupdate\n, \n@map(type=\nkeyvalue\n, @attributes(id = \nid\n, name = \nname\n, \nbefore_id = \nbefore_id\n, before_name = \nbefore_name\n)))\ndefine stream inputStream (before_id string, id string, \nbefore_name string , name string);\n\n\n\n\n\nIn this example, the cdc source starts listening to the row updates on students table which is under MySQL SimpleDB database that can be accessed with the given url.\n\n\n\nEXAMPLE 3\n\n\n@source(type = \ncdc\n , url = \njdbc:mysql://localhost:3306/SimpleDB\n, \nusername = \ncdcuser\n, password = \npswd4cdc\n, \ntable.name = \nstudents\n, operation = \ndelete\n, \n@map(type=\nkeyvalue\n, @attributes(before_id = \nbefore_id\n, before_name = \nbefore_name\n)))\ndefine stream inputStream (before_id string, before_name string);\n\n\n\n\n\nIn this example, the cdc source starts listening to the row deletions on students table which is under MySQL SimpleDB database that can be accessed with the given url.\n\n\n\nEXAMPLE 4\n\n\n@source(type = \ncdc\n, mode=\npolling\n, polling.column = \nid\n, \njdbc.driver.name = \ncom.mysql.jdbc.Driver\n, url = \njdbc:mysql://localhost:3306/SimpleDB\n, \nusername = \ncdcuser\n, password = \npswd4cdc\n, \ntable.name = \nstudents\n, \n@map(type=\nkeyvalue\n), @attributes(id = \nid\n, name = \nname\n))\ndefine stream inputStream (id int, name string);\n\n\n\n\n\nIn this example, the cdc source starts polling students table for inserts. polling.column is an auto incremental field. url, username, password, and jdbc.driver.name are used to connect to the database.\n\n\n\nEXAMPLE 5\n\n\n@source(type = \ncdc\n, mode=\npolling\n, polling.column = \nid\n, datasource.name = \nSimpleDB\n,\ntable.name = \nstudents\n, \n@map(type=\nkeyvalue\n), @attributes(id = \nid\n, name = \nname\n))\ndefine stream inputStream (id int, name string);\n\n\n\n\n\nIn this example, the cdc source starts polling students table for inserts. polling.column is a char column with the pattern S001, S002, ... . datasource.name is used to connect to the database. Note that the datasource.name works only with the Stream Processor.\n\n\n\nEXAMPLE 6\n\n\n@source(type = \ncdc\n, mode=\npolling\n, polling.column = \nlast_updated\n, datasource.name = \nSimpleDB\n,\ntable.name = \nstudents\n, \n@map(type=\nkeyvalue\n))\ndefine stream inputStream (name string);\n\n\n\n\n\nIn this example, the cdc source starts polling students table for inserts and updates. polling.column is a timestamp field.", 
            "title": "1.0.6"
        }, 
        {
            "location": "/api/1.0.6/#api-docs-v106", 
            "text": "", 
            "title": "API Docs - v1.0.6"
        }, 
        {
            "location": "/api/1.0.6/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/1.0.6/#cdc-source", 
            "text": "The CDC source receives events when a Database table's change event (INSERT, UPDATE, DELETE) is triggered. The events are received in key-value format. The following are key values of the map of a CDC change event and their descriptions. For insert: Keys will be specified table's columns. For delete: Keys will be 'before_' followed by specified table's columns. Eg: before_X. For update: Keys will be specified table's columns and 'before_' followed by specified table's columns. For 'polling' mode: Keys will be specified table's columns. See parameter: mode for supported databases and change events.  Syntax  @source(type= cdc , url= STRING , mode= STRING , jdbc.driver.name= STRING , username= STRING , password= STRING , pool.properties= STRING , datasource.name= STRING , table.name= STRING , polling.column= STRING , polling.interval= INT , operation= STRING , connector.properties= STRING , database.server.id= STRING , database.server.name= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         url \n         Connection url to the database. use format: jdbc:mysql:// host : port / database_name   \n         \n         STRING \n         No \n         No \n     \n     \n         mode \n         Mode to capture the change data. Mode 'polling' uses a polling.column to monitor the given table. Mode 'listening' uses logs to monitor the given table. The required parameters are different for each modes. mode 'listening' currently supports only MySQL. INSERT, UPDATE, DELETE events can be received. mode 'polling' supports RDBMS. INSERT, UPDATE events can be received. \n         listening \n         STRING \n         Yes \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the database.  Required for 'polling' mode. \n         \n         STRING \n         Yes \n         No \n     \n     \n         username \n         Username of a user with SELECT, RELOAD, SHOW DATABASES, REPLICATION SLAVE, REPLICATION CLIENT privileges on Change Data Capturing table. For polling mode, a user with SELECT privileges. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         Password for the above user. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key-value pairs. \n         \n         STRING \n         Yes \n         No \n     \n     \n         datasource.name \n         Name of the wso2 datasource to connect to the database. When datasource.name is provided, the url, username and password are not needed. Has a more priority over url based connection. Accepted only when mode is set to 'polling'. \n         \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         Name of the table which needs to be monitored for data changes. \n         \n         STRING \n         No \n         No \n     \n     \n         polling.column \n         Column name on which the polling is done to capture the change data. It is recommend to have a TIMESTAMP field as the polling.column in order to capture inserts and updates. Numeric auto incremental fields and char fields can be also used as polling.column. Note that it will only support insert change capturing and depends on how the char field's data is input. Mandatory when mode is 'polling'. \n         \n         STRING \n         Yes \n         No \n     \n     \n         polling.interval \n         The interval in seconds to poll the given table for changes. Accepted only when mode is set to 'polling'. \n         1 \n         INT \n         Yes \n         No \n     \n     \n         operation \n         Interested change event operation. 'insert', 'update' or 'delete'. Required for 'listening' mode. Not case sensitive. \n         \n         STRING \n         No \n         No \n     \n     \n         connector.properties \n         Debezium connector specified properties as a comma separated string.  This properties will have more priority over the parameters. Only for 'listening' mode \n         Empty_String \n         STRING \n         Yes \n         No \n     \n     \n         database.server.id \n         For MySQL, a unique integer between 1 to 2^32 as the ID, This is used when joining MySQL database cluster to read binlog. Only for 'listening'mode. \n         Random integer between 5400 and 6400 \n         STRING \n         Yes \n         No \n     \n     \n         database.server.name \n         Logical name that identifies and provides a namespace for the particular database server. Only for 'listening' mode. \n         {host}_{port} \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @source(type =  cdc  , url =  jdbc:mysql://localhost:3306/SimpleDB , \nusername =  cdcuser , password =  pswd4cdc , \ntable.name =  students , operation =  insert , \n@map(type= keyvalue , @attributes(id =  id , name =  name )))\ndefine stream inputStream (id string, name string);  In this example, the cdc source starts listening to the row insertions  on students table with columns name and id which is under MySQL SimpleDB database that can be accessed with the given url  EXAMPLE 2  @source(type =  cdc  , url =  jdbc:mysql://localhost:3306/SimpleDB , \nusername =  cdcuser , password =  pswd4cdc , \ntable.name =  students , operation =  update , \n@map(type= keyvalue , @attributes(id =  id , name =  name , \nbefore_id =  before_id , before_name =  before_name )))\ndefine stream inputStream (before_id string, id string, \nbefore_name string , name string);  In this example, the cdc source starts listening to the row updates on students table which is under MySQL SimpleDB database that can be accessed with the given url.  EXAMPLE 3  @source(type =  cdc  , url =  jdbc:mysql://localhost:3306/SimpleDB , \nusername =  cdcuser , password =  pswd4cdc , \ntable.name =  students , operation =  delete , \n@map(type= keyvalue , @attributes(before_id =  before_id , before_name =  before_name )))\ndefine stream inputStream (before_id string, before_name string);  In this example, the cdc source starts listening to the row deletions on students table which is under MySQL SimpleDB database that can be accessed with the given url.  EXAMPLE 4  @source(type =  cdc , mode= polling , polling.column =  id , \njdbc.driver.name =  com.mysql.jdbc.Driver , url =  jdbc:mysql://localhost:3306/SimpleDB , \nusername =  cdcuser , password =  pswd4cdc , \ntable.name =  students , \n@map(type= keyvalue ), @attributes(id =  id , name =  name ))\ndefine stream inputStream (id int, name string);  In this example, the cdc source starts polling students table for inserts. polling.column is an auto incremental field. url, username, password, and jdbc.driver.name are used to connect to the database.  EXAMPLE 5  @source(type =  cdc , mode= polling , polling.column =  id , datasource.name =  SimpleDB ,\ntable.name =  students , \n@map(type= keyvalue ), @attributes(id =  id , name =  name ))\ndefine stream inputStream (id int, name string);  In this example, the cdc source starts polling students table for inserts. polling.column is a char column with the pattern S001, S002, ... . datasource.name is used to connect to the database. Note that the datasource.name works only with the Stream Processor.  EXAMPLE 6  @source(type =  cdc , mode= polling , polling.column =  last_updated , datasource.name =  SimpleDB ,\ntable.name =  students , \n@map(type= keyvalue ))\ndefine stream inputStream (name string);  In this example, the cdc source starts polling students table for inserts and updates. polling.column is a timestamp field.", 
            "title": "cdc (Source)"
        }, 
        {
            "location": "/api/1.0.5/", 
            "text": "API Docs - v1.0.5\n\n\nSource\n\n\ncdc \n(Source)\n\n\nThe CDC source receives events when a Database table's change event (INSERT, UPDATE, DELETE) is triggered. The events are received in key-value format.\nThe following are key values of the map of a CDC change event and their descriptions.\nFor insert: Keys will be specified table's columns.\nFor delete: Keys will be 'before_' followed by specified table's columns. Eg: before_X.\nFor update: Keys will be specified table's columns and 'before_' followed by specified table's columns.\nFor 'polling' mode: Keys will be specified table's columns.\nSee parameter: mode for supported databases and change events.\n\n\n\nSyntax\n\n\n@source(type=\ncdc\n, url=\nSTRING\n, mode=\nSTRING\n, jdbc.driver.name=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, pool.properties=\nSTRING\n, datasource.name=\nSTRING\n, table.name=\nSTRING\n, polling.column=\nSTRING\n, polling.interval=\nINT\n, operation=\nSTRING\n, connector.properties=\nSTRING\n, database.server.id=\nSTRING\n, database.server.name=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nurl\n\n        \nConnection url to the database.\nuse format: jdbc:mysql://\nhost\n:\nport\n/\ndatabase_name\n \n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmode\n\n        \nMode to capture the change data. Mode 'polling' uses a polling.column to monitor the given table. Mode 'listening' uses logs to monitor the given table.\nThe required parameters are different for each modes.\nmode 'listening' currently supports only MySQL. INSERT, UPDATE, DELETE events can be received.\nmode 'polling' supports RDBMS. INSERT, UPDATE events can be received.\n\n        \nlistening\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the database. \nRequired for 'polling' mode.\n\n        \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nUsername of a user with SELECT, RELOAD, SHOW DATABASES, REPLICATION SLAVE, REPLICATION CLIENT privileges on Change Data Capturing table.\nFor polling mode, a user with SELECT privileges.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nPassword for the above user.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key-value pairs.\n\n        \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nName of the wso2 datasource to connect to the database. When datasource.name is provided, the url, username and password are not needed. Has a more priority over url based connection.\nAccepted only when mode is set to 'polling'.\n\n        \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nName of the table which needs to be monitored for data changes.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npolling.column\n\n        \nColumn name on which the polling is done to capture the change data. It is recommend to have a TIMESTAMP field as the polling.column in order to capture inserts and updates.\nNumeric auto incremental fields and char fields can be also used as polling.column. Note that it will only support insert change capturing and depends on how the char field's data is input.\nMandatory when mode is 'polling'.\n\n        \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \npolling.interval\n\n        \nThe interval in seconds to poll the given table for changes.\nAccepted only when mode is set to 'polling'.\n\n        \n1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \noperation\n\n        \nInterested change event operation. 'insert', 'update' or 'delete'. Required for 'listening' mode.\nNot case sensitive.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconnector.properties\n\n        \nDebezium connector specified properties as a comma separated string. \nThis properties will have more priority over the parameters. Only for 'listening' mode\n\n        \nEmpty_String\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatabase.server.id\n\n        \nFor MySQL, a unique integer between 1 to 2^32 as the ID, This is used when joining MySQL database cluster to read binlog. Only for 'listening'mode.\n\n        \nRandom integer between 5400 and 6400\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatabase.server.name\n\n        \nLogical name that identifies and provides a namespace for the particular database server. Only for 'listening' mode.\n\n        \n{host}_{port}\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type = \ncdc\n , url = \njdbc:mysql://localhost:3306/SimpleDB\n, \nusername = \ncdcuser\n, password = \npswd4cdc\n, \ntable.name = \nstudents\n, operation = \ninsert\n, \n@map(type=\nkeyvalue\n, @attributes(id = \nid\n, name = \nname\n)))\ndefine stream inputStream (id string, name string);\n\n\n\n\n\nIn this example, the cdc source starts listening to the row insertions  on students table with columns name and id which is under MySQL SimpleDB database that can be accessed with the given url\n\n\n\nEXAMPLE 2\n\n\n@source(type = \ncdc\n , url = \njdbc:mysql://localhost:3306/SimpleDB\n, \nusername = \ncdcuser\n, password = \npswd4cdc\n, \ntable.name = \nstudents\n, operation = \nupdate\n, \n@map(type=\nkeyvalue\n, @attributes(id = \nid\n, name = \nname\n, \nbefore_id = \nbefore_id\n, before_name = \nbefore_name\n)))\ndefine stream inputStream (before_id string, id string, \nbefore_name string , name string);\n\n\n\n\n\nIn this example, the cdc source starts listening to the row updates on students table which is under MySQL SimpleDB database that can be accessed with the given url.\n\n\n\nEXAMPLE 3\n\n\n@source(type = \ncdc\n , url = \njdbc:mysql://localhost:3306/SimpleDB\n, \nusername = \ncdcuser\n, password = \npswd4cdc\n, \ntable.name = \nstudents\n, operation = \ndelete\n, \n@map(type=\nkeyvalue\n, @attributes(before_id = \nbefore_id\n, before_name = \nbefore_name\n)))\ndefine stream inputStream (before_id string, before_name string);\n\n\n\n\n\nIn this example, the cdc source starts listening to the row deletions on students table which is under MySQL SimpleDB database that can be accessed with the given url.\n\n\n\nEXAMPLE 4\n\n\n@source(type = \ncdc\n, mode=\npolling\n, polling.column = \nid\n, \njdbc.driver.name = \ncom.mysql.jdbc.Driver\n, url = \njdbc:mysql://localhost:3306/SimpleDB\n, \nusername = \ncdcuser\n, password = \npswd4cdc\n, \ntable.name = \nstudents\n, \n@map(type=\nkeyvalue\n), @attributes(id = \nid\n, name = \nname\n))\ndefine stream inputStream (id int, name string);\n\n\n\n\n\nIn this example, the cdc source starts polling students table for inserts. polling.column is an auto incremental field. url, username, password, and jdbc.driver.name are used to connect to the database.\n\n\n\nEXAMPLE 5\n\n\n@source(type = \ncdc\n, mode=\npolling\n, polling.column = \nid\n, datasource.name = \nSimpleDB\n,\ntable.name = \nstudents\n, \n@map(type=\nkeyvalue\n), @attributes(id = \nid\n, name = \nname\n))\ndefine stream inputStream (id int, name string);\n\n\n\n\n\nIn this example, the cdc source starts polling students table for inserts. polling.column is a char column with the pattern S001, S002, ... . datasource.name is used to connect to the database. Note that the datasource.name works only with the Stream Processor.\n\n\n\nEXAMPLE 6\n\n\n@source(type = \ncdc\n, mode=\npolling\n, polling.column = \nlast_updated\n, datasource.name = \nSimpleDB\n,\ntable.name = \nstudents\n, \n@map(type=\nkeyvalue\n))\ndefine stream inputStream (name string);\n\n\n\n\n\nIn this example, the cdc source starts polling students table for inserts and updates. polling.column is a timestamp field.", 
            "title": "1.0.5"
        }, 
        {
            "location": "/api/1.0.5/#api-docs-v105", 
            "text": "", 
            "title": "API Docs - v1.0.5"
        }, 
        {
            "location": "/api/1.0.5/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/1.0.5/#cdc-source", 
            "text": "The CDC source receives events when a Database table's change event (INSERT, UPDATE, DELETE) is triggered. The events are received in key-value format. The following are key values of the map of a CDC change event and their descriptions. For insert: Keys will be specified table's columns. For delete: Keys will be 'before_' followed by specified table's columns. Eg: before_X. For update: Keys will be specified table's columns and 'before_' followed by specified table's columns. For 'polling' mode: Keys will be specified table's columns. See parameter: mode for supported databases and change events.  Syntax  @source(type= cdc , url= STRING , mode= STRING , jdbc.driver.name= STRING , username= STRING , password= STRING , pool.properties= STRING , datasource.name= STRING , table.name= STRING , polling.column= STRING , polling.interval= INT , operation= STRING , connector.properties= STRING , database.server.id= STRING , database.server.name= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         url \n         Connection url to the database. use format: jdbc:mysql:// host : port / database_name   \n         \n         STRING \n         No \n         No \n     \n     \n         mode \n         Mode to capture the change data. Mode 'polling' uses a polling.column to monitor the given table. Mode 'listening' uses logs to monitor the given table. The required parameters are different for each modes. mode 'listening' currently supports only MySQL. INSERT, UPDATE, DELETE events can be received. mode 'polling' supports RDBMS. INSERT, UPDATE events can be received. \n         listening \n         STRING \n         Yes \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the database.  Required for 'polling' mode. \n         \n         STRING \n         Yes \n         No \n     \n     \n         username \n         Username of a user with SELECT, RELOAD, SHOW DATABASES, REPLICATION SLAVE, REPLICATION CLIENT privileges on Change Data Capturing table. For polling mode, a user with SELECT privileges. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         Password for the above user. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key-value pairs. \n         \n         STRING \n         Yes \n         No \n     \n     \n         datasource.name \n         Name of the wso2 datasource to connect to the database. When datasource.name is provided, the url, username and password are not needed. Has a more priority over url based connection. Accepted only when mode is set to 'polling'. \n         \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         Name of the table which needs to be monitored for data changes. \n         \n         STRING \n         No \n         No \n     \n     \n         polling.column \n         Column name on which the polling is done to capture the change data. It is recommend to have a TIMESTAMP field as the polling.column in order to capture inserts and updates. Numeric auto incremental fields and char fields can be also used as polling.column. Note that it will only support insert change capturing and depends on how the char field's data is input. Mandatory when mode is 'polling'. \n         \n         STRING \n         Yes \n         No \n     \n     \n         polling.interval \n         The interval in seconds to poll the given table for changes. Accepted only when mode is set to 'polling'. \n         1 \n         INT \n         Yes \n         No \n     \n     \n         operation \n         Interested change event operation. 'insert', 'update' or 'delete'. Required for 'listening' mode. Not case sensitive. \n         \n         STRING \n         No \n         No \n     \n     \n         connector.properties \n         Debezium connector specified properties as a comma separated string.  This properties will have more priority over the parameters. Only for 'listening' mode \n         Empty_String \n         STRING \n         Yes \n         No \n     \n     \n         database.server.id \n         For MySQL, a unique integer between 1 to 2^32 as the ID, This is used when joining MySQL database cluster to read binlog. Only for 'listening'mode. \n         Random integer between 5400 and 6400 \n         STRING \n         Yes \n         No \n     \n     \n         database.server.name \n         Logical name that identifies and provides a namespace for the particular database server. Only for 'listening' mode. \n         {host}_{port} \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @source(type =  cdc  , url =  jdbc:mysql://localhost:3306/SimpleDB , \nusername =  cdcuser , password =  pswd4cdc , \ntable.name =  students , operation =  insert , \n@map(type= keyvalue , @attributes(id =  id , name =  name )))\ndefine stream inputStream (id string, name string);  In this example, the cdc source starts listening to the row insertions  on students table with columns name and id which is under MySQL SimpleDB database that can be accessed with the given url  EXAMPLE 2  @source(type =  cdc  , url =  jdbc:mysql://localhost:3306/SimpleDB , \nusername =  cdcuser , password =  pswd4cdc , \ntable.name =  students , operation =  update , \n@map(type= keyvalue , @attributes(id =  id , name =  name , \nbefore_id =  before_id , before_name =  before_name )))\ndefine stream inputStream (before_id string, id string, \nbefore_name string , name string);  In this example, the cdc source starts listening to the row updates on students table which is under MySQL SimpleDB database that can be accessed with the given url.  EXAMPLE 3  @source(type =  cdc  , url =  jdbc:mysql://localhost:3306/SimpleDB , \nusername =  cdcuser , password =  pswd4cdc , \ntable.name =  students , operation =  delete , \n@map(type= keyvalue , @attributes(before_id =  before_id , before_name =  before_name )))\ndefine stream inputStream (before_id string, before_name string);  In this example, the cdc source starts listening to the row deletions on students table which is under MySQL SimpleDB database that can be accessed with the given url.  EXAMPLE 4  @source(type =  cdc , mode= polling , polling.column =  id , \njdbc.driver.name =  com.mysql.jdbc.Driver , url =  jdbc:mysql://localhost:3306/SimpleDB , \nusername =  cdcuser , password =  pswd4cdc , \ntable.name =  students , \n@map(type= keyvalue ), @attributes(id =  id , name =  name ))\ndefine stream inputStream (id int, name string);  In this example, the cdc source starts polling students table for inserts. polling.column is an auto incremental field. url, username, password, and jdbc.driver.name are used to connect to the database.  EXAMPLE 5  @source(type =  cdc , mode= polling , polling.column =  id , datasource.name =  SimpleDB ,\ntable.name =  students , \n@map(type= keyvalue ), @attributes(id =  id , name =  name ))\ndefine stream inputStream (id int, name string);  In this example, the cdc source starts polling students table for inserts. polling.column is a char column with the pattern S001, S002, ... . datasource.name is used to connect to the database. Note that the datasource.name works only with the Stream Processor.  EXAMPLE 6  @source(type =  cdc , mode= polling , polling.column =  last_updated , datasource.name =  SimpleDB ,\ntable.name =  students , \n@map(type= keyvalue ))\ndefine stream inputStream (name string);  In this example, the cdc source starts polling students table for inserts and updates. polling.column is a timestamp field.", 
            "title": "cdc (Source)"
        }, 
        {
            "location": "/api/latest/", 
            "text": "API Docs - v1.0.6\n\n\nSource\n\n\ncdc \n(Source)\n\n\nThe CDC source receives events when a Database table's change event (INSERT, UPDATE, DELETE) is triggered. The events are received in key-value format.\nThe following are key values of the map of a CDC change event and their descriptions.\nFor insert: Keys will be specified table's columns.\nFor delete: Keys will be 'before_' followed by specified table's columns. Eg: before_X.\nFor update: Keys will be specified table's columns and 'before_' followed by specified table's columns.\nFor 'polling' mode: Keys will be specified table's columns.\nSee parameter: mode for supported databases and change events.\n\n\n\nSyntax\n\n\n@source(type=\ncdc\n, url=\nSTRING\n, mode=\nSTRING\n, jdbc.driver.name=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, pool.properties=\nSTRING\n, datasource.name=\nSTRING\n, table.name=\nSTRING\n, polling.column=\nSTRING\n, polling.interval=\nINT\n, operation=\nSTRING\n, connector.properties=\nSTRING\n, database.server.id=\nSTRING\n, database.server.name=\nSTRING\n, @map(...)))\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nurl\n\n        \nConnection url to the database.\nuse format: jdbc:mysql://\nhost\n:\nport\n/\ndatabase_name\n \n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nmode\n\n        \nMode to capture the change data. Mode 'polling' uses a polling.column to monitor the given table. Mode 'listening' uses logs to monitor the given table.\nThe required parameters are different for each modes.\nmode 'listening' currently supports only MySQL. INSERT, UPDATE, DELETE events can be received.\nmode 'polling' supports RDBMS. INSERT, UPDATE events can be received.\n\n        \nlistening\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \njdbc.driver.name\n\n        \nThe driver class name for connecting the database. \nRequired for 'polling' mode.\n\n        \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nUsername of a user with SELECT, RELOAD, SHOW DATABASES, REPLICATION SLAVE, REPLICATION CLIENT privileges on Change Data Capturing table.\nFor polling mode, a user with SELECT privileges.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nPassword for the above user.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npool.properties\n\n        \nAny pool parameters for the database connection must be specified as key-value pairs.\n\n        \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatasource.name\n\n        \nName of the wso2 datasource to connect to the database. When datasource.name is provided, the url, username and password are not needed. Has a more priority over url based connection.\nAccepted only when mode is set to 'polling'.\n\n        \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntable.name\n\n        \nName of the table which needs to be monitored for data changes.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \npolling.column\n\n        \nColumn name on which the polling is done to capture the change data. It is recommend to have a TIMESTAMP field as the polling.column in order to capture inserts and updates.\nNumeric auto incremental fields and char fields can be also used as polling.column. Note that it will only support insert change capturing and depends on how the char field's data is input.\nMandatory when mode is 'polling'.\n\n        \n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \npolling.interval\n\n        \nThe interval in seconds to poll the given table for changes.\nAccepted only when mode is set to 'polling'.\n\n        \n1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \noperation\n\n        \nInterested change event operation. 'insert', 'update' or 'delete'. Required for 'listening' mode.\nNot case sensitive.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nconnector.properties\n\n        \nDebezium connector specified properties as a comma separated string. \nThis properties will have more priority over the parameters. Only for 'listening' mode\n\n        \nEmpty_String\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatabase.server.id\n\n        \nFor MySQL, a unique integer between 1 to 2^32 as the ID, This is used when joining MySQL database cluster to read binlog. Only for 'listening'mode.\n\n        \nRandom integer between 5400 and 6400\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndatabase.server.name\n\n        \nLogical name that identifies and provides a namespace for the particular database server. Only for 'listening' mode.\n\n        \n{host}_{port}\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type = \ncdc\n , url = \njdbc:mysql://localhost:3306/SimpleDB\n, \nusername = \ncdcuser\n, password = \npswd4cdc\n, \ntable.name = \nstudents\n, operation = \ninsert\n, \n@map(type=\nkeyvalue\n, @attributes(id = \nid\n, name = \nname\n)))\ndefine stream inputStream (id string, name string);\n\n\n\n\n\nIn this example, the cdc source starts listening to the row insertions  on students table with columns name and id which is under MySQL SimpleDB database that can be accessed with the given url\n\n\n\nEXAMPLE 2\n\n\n@source(type = \ncdc\n , url = \njdbc:mysql://localhost:3306/SimpleDB\n, \nusername = \ncdcuser\n, password = \npswd4cdc\n, \ntable.name = \nstudents\n, operation = \nupdate\n, \n@map(type=\nkeyvalue\n, @attributes(id = \nid\n, name = \nname\n, \nbefore_id = \nbefore_id\n, before_name = \nbefore_name\n)))\ndefine stream inputStream (before_id string, id string, \nbefore_name string , name string);\n\n\n\n\n\nIn this example, the cdc source starts listening to the row updates on students table which is under MySQL SimpleDB database that can be accessed with the given url.\n\n\n\nEXAMPLE 3\n\n\n@source(type = \ncdc\n , url = \njdbc:mysql://localhost:3306/SimpleDB\n, \nusername = \ncdcuser\n, password = \npswd4cdc\n, \ntable.name = \nstudents\n, operation = \ndelete\n, \n@map(type=\nkeyvalue\n, @attributes(before_id = \nbefore_id\n, before_name = \nbefore_name\n)))\ndefine stream inputStream (before_id string, before_name string);\n\n\n\n\n\nIn this example, the cdc source starts listening to the row deletions on students table which is under MySQL SimpleDB database that can be accessed with the given url.\n\n\n\nEXAMPLE 4\n\n\n@source(type = \ncdc\n, mode=\npolling\n, polling.column = \nid\n, \njdbc.driver.name = \ncom.mysql.jdbc.Driver\n, url = \njdbc:mysql://localhost:3306/SimpleDB\n, \nusername = \ncdcuser\n, password = \npswd4cdc\n, \ntable.name = \nstudents\n, \n@map(type=\nkeyvalue\n), @attributes(id = \nid\n, name = \nname\n))\ndefine stream inputStream (id int, name string);\n\n\n\n\n\nIn this example, the cdc source starts polling students table for inserts. polling.column is an auto incremental field. url, username, password, and jdbc.driver.name are used to connect to the database.\n\n\n\nEXAMPLE 5\n\n\n@source(type = \ncdc\n, mode=\npolling\n, polling.column = \nid\n, datasource.name = \nSimpleDB\n,\ntable.name = \nstudents\n, \n@map(type=\nkeyvalue\n), @attributes(id = \nid\n, name = \nname\n))\ndefine stream inputStream (id int, name string);\n\n\n\n\n\nIn this example, the cdc source starts polling students table for inserts. polling.column is a char column with the pattern S001, S002, ... . datasource.name is used to connect to the database. Note that the datasource.name works only with the Stream Processor.\n\n\n\nEXAMPLE 6\n\n\n@source(type = \ncdc\n, mode=\npolling\n, polling.column = \nlast_updated\n, datasource.name = \nSimpleDB\n,\ntable.name = \nstudents\n, \n@map(type=\nkeyvalue\n))\ndefine stream inputStream (name string);\n\n\n\n\n\nIn this example, the cdc source starts polling students table for inserts and updates. polling.column is a timestamp field.", 
            "title": "latest"
        }, 
        {
            "location": "/api/latest/#api-docs-v106", 
            "text": "", 
            "title": "API Docs - v1.0.6"
        }, 
        {
            "location": "/api/latest/#source", 
            "text": "", 
            "title": "Source"
        }, 
        {
            "location": "/api/latest/#cdc-source", 
            "text": "The CDC source receives events when a Database table's change event (INSERT, UPDATE, DELETE) is triggered. The events are received in key-value format. The following are key values of the map of a CDC change event and their descriptions. For insert: Keys will be specified table's columns. For delete: Keys will be 'before_' followed by specified table's columns. Eg: before_X. For update: Keys will be specified table's columns and 'before_' followed by specified table's columns. For 'polling' mode: Keys will be specified table's columns. See parameter: mode for supported databases and change events.  Syntax  @source(type= cdc , url= STRING , mode= STRING , jdbc.driver.name= STRING , username= STRING , password= STRING , pool.properties= STRING , datasource.name= STRING , table.name= STRING , polling.column= STRING , polling.interval= INT , operation= STRING , connector.properties= STRING , database.server.id= STRING , database.server.name= STRING , @map(...)))  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         url \n         Connection url to the database. use format: jdbc:mysql:// host : port / database_name   \n         \n         STRING \n         No \n         No \n     \n     \n         mode \n         Mode to capture the change data. Mode 'polling' uses a polling.column to monitor the given table. Mode 'listening' uses logs to monitor the given table. The required parameters are different for each modes. mode 'listening' currently supports only MySQL. INSERT, UPDATE, DELETE events can be received. mode 'polling' supports RDBMS. INSERT, UPDATE events can be received. \n         listening \n         STRING \n         Yes \n         No \n     \n     \n         jdbc.driver.name \n         The driver class name for connecting the database.  Required for 'polling' mode. \n         \n         STRING \n         Yes \n         No \n     \n     \n         username \n         Username of a user with SELECT, RELOAD, SHOW DATABASES, REPLICATION SLAVE, REPLICATION CLIENT privileges on Change Data Capturing table. For polling mode, a user with SELECT privileges. \n         \n         STRING \n         No \n         No \n     \n     \n         password \n         Password for the above user. \n         \n         STRING \n         No \n         No \n     \n     \n         pool.properties \n         Any pool parameters for the database connection must be specified as key-value pairs. \n         \n         STRING \n         Yes \n         No \n     \n     \n         datasource.name \n         Name of the wso2 datasource to connect to the database. When datasource.name is provided, the url, username and password are not needed. Has a more priority over url based connection. Accepted only when mode is set to 'polling'. \n         \n         STRING \n         Yes \n         No \n     \n     \n         table.name \n         Name of the table which needs to be monitored for data changes. \n         \n         STRING \n         No \n         No \n     \n     \n         polling.column \n         Column name on which the polling is done to capture the change data. It is recommend to have a TIMESTAMP field as the polling.column in order to capture inserts and updates. Numeric auto incremental fields and char fields can be also used as polling.column. Note that it will only support insert change capturing and depends on how the char field's data is input. Mandatory when mode is 'polling'. \n         \n         STRING \n         Yes \n         No \n     \n     \n         polling.interval \n         The interval in seconds to poll the given table for changes. Accepted only when mode is set to 'polling'. \n         1 \n         INT \n         Yes \n         No \n     \n     \n         operation \n         Interested change event operation. 'insert', 'update' or 'delete'. Required for 'listening' mode. Not case sensitive. \n         \n         STRING \n         No \n         No \n     \n     \n         connector.properties \n         Debezium connector specified properties as a comma separated string.  This properties will have more priority over the parameters. Only for 'listening' mode \n         Empty_String \n         STRING \n         Yes \n         No \n     \n     \n         database.server.id \n         For MySQL, a unique integer between 1 to 2^32 as the ID, This is used when joining MySQL database cluster to read binlog. Only for 'listening'mode. \n         Random integer between 5400 and 6400 \n         STRING \n         Yes \n         No \n     \n     \n         database.server.name \n         Logical name that identifies and provides a namespace for the particular database server. Only for 'listening' mode. \n         {host}_{port} \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @source(type =  cdc  , url =  jdbc:mysql://localhost:3306/SimpleDB , \nusername =  cdcuser , password =  pswd4cdc , \ntable.name =  students , operation =  insert , \n@map(type= keyvalue , @attributes(id =  id , name =  name )))\ndefine stream inputStream (id string, name string);  In this example, the cdc source starts listening to the row insertions  on students table with columns name and id which is under MySQL SimpleDB database that can be accessed with the given url  EXAMPLE 2  @source(type =  cdc  , url =  jdbc:mysql://localhost:3306/SimpleDB , \nusername =  cdcuser , password =  pswd4cdc , \ntable.name =  students , operation =  update , \n@map(type= keyvalue , @attributes(id =  id , name =  name , \nbefore_id =  before_id , before_name =  before_name )))\ndefine stream inputStream (before_id string, id string, \nbefore_name string , name string);  In this example, the cdc source starts listening to the row updates on students table which is under MySQL SimpleDB database that can be accessed with the given url.  EXAMPLE 3  @source(type =  cdc  , url =  jdbc:mysql://localhost:3306/SimpleDB , \nusername =  cdcuser , password =  pswd4cdc , \ntable.name =  students , operation =  delete , \n@map(type= keyvalue , @attributes(before_id =  before_id , before_name =  before_name )))\ndefine stream inputStream (before_id string, before_name string);  In this example, the cdc source starts listening to the row deletions on students table which is under MySQL SimpleDB database that can be accessed with the given url.  EXAMPLE 4  @source(type =  cdc , mode= polling , polling.column =  id , \njdbc.driver.name =  com.mysql.jdbc.Driver , url =  jdbc:mysql://localhost:3306/SimpleDB , \nusername =  cdcuser , password =  pswd4cdc , \ntable.name =  students , \n@map(type= keyvalue ), @attributes(id =  id , name =  name ))\ndefine stream inputStream (id int, name string);  In this example, the cdc source starts polling students table for inserts. polling.column is an auto incremental field. url, username, password, and jdbc.driver.name are used to connect to the database.  EXAMPLE 5  @source(type =  cdc , mode= polling , polling.column =  id , datasource.name =  SimpleDB ,\ntable.name =  students , \n@map(type= keyvalue ), @attributes(id =  id , name =  name ))\ndefine stream inputStream (id int, name string);  In this example, the cdc source starts polling students table for inserts. polling.column is a char column with the pattern S001, S002, ... . datasource.name is used to connect to the database. Note that the datasource.name works only with the Stream Processor.  EXAMPLE 6  @source(type =  cdc , mode= polling , polling.column =  last_updated , datasource.name =  SimpleDB ,\ntable.name =  students , \n@map(type= keyvalue ))\ndefine stream inputStream (name string);  In this example, the cdc source starts polling students table for inserts and updates. polling.column is a timestamp field.", 
            "title": "cdc (Source)"
        }, 
        {
            "location": "/license/", 
            "text": "Copyright (c) 2018 WSO2 Inc. (\nhttp://www.wso2.org\n) All Rights Reserved.\n\n\nWSO2 Inc. licenses this file to you under the Apache License,\nVersion 2.0 (the \"License\"); you may not use this file except\nin compliance with the License.\nYou may obtain a copy of the License at\n\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n\n\n-------------------------------------------------------------------------\n                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \nLicense\n shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \nLicensor\n shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \nLegal Entity\n shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \ncontrol\n means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \nYou\n (or \nYour\n) shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \nSource\n form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \nObject\n form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \nWork\n shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \nDerivative Works\n shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \nContribution\n shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \nsubmitted\n\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \nNot a Contribution.\n\n\n   \nContributor\n shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \nNOTICE\n text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \nAS IS\n BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS", 
            "title": "License"
        }
    ]
}